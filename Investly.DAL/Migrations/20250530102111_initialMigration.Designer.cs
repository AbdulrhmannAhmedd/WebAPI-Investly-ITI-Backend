// <auto-generated />
using System;
using Investly.DAL.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Investly.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250530102111_initialMigration")]
    partial class initialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Investly.DAL.Entities.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Airate")
                        .HasColumnType("decimal(3, 2)")
                        .HasColumnName("AIRate");

                    b.Property<decimal?>("Capital")
                        .HasColumnType("decimal(10, 5)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FounderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDrafted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Stage")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Business__3214EC075E0D0000");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FounderId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Business", (string)null);
                });

            modelBuilder.Entity("Investly.DAL.Entities.BusinessStandardAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("StandardId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Business__3214EC074A4C9C5D");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StandardId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("BusinessStandardAnswers");
                });

            modelBuilder.Entity("Investly.DAL.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Category__3214EC074C9193E2");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Investly.DAL.Entities.CategoryStandard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("StandardId")
                        .HasColumnType("int");

                    b.Property<int?>("Starus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Category__3214EC07756124F4");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("StandardId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CategoryStandard", (string)null);
                });

            modelBuilder.Entity("Investly.DAL.Entities.CategoryStandardsKeyWord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryStandardId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("KeyWord")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Category__3214EC077C678085");

                    b.HasIndex("CategoryStandardId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("CategoryStandardsKeyWords");
                });

            modelBuilder.Entity("Investly.DAL.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GovId")
                        .HasColumnType("int");

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Name_Ar");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Name_En");

                    b.HasKey("Id")
                        .HasName("PK__Cities__3214EC07E554E366");

                    b.HasIndex("GovId");

                    b.HasIndex(new[] { "NameAr" }, "UQ_Cities_Name_Ar")
                        .IsUnique();

                    b.HasIndex(new[] { "NameEn" }, "UQ_Cities_Name_En")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Investly.DAL.Entities.ContactU", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id")
                        .HasName("PK__ContactU__3214EC07B7F9C6CA");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("Investly.DAL.Entities.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserIdTo")
                        .HasColumnType("int");

                    b.Property<int>("UserTypeFrom")
                        .HasColumnType("int");

                    b.Property<int>("UserTypeTo")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Feedback__3214EC0715E0C82B");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserIdTo");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("Investly.DAL.Entities.Founder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Founders__3214EC070FEAA322");

                    b.HasIndex(new[] { "UserId" }, "UQ__Founders__1788CC4D257E4087")
                        .IsUnique();

                    b.ToTable("Founders");
                });

            modelBuilder.Entity("Investly.DAL.Entities.Government", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("NameAr")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Name_Ar");

                    b.Property<string>("NameEn")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Name_En");

                    b.HasKey("Id")
                        .HasName("PK__Governme__3214EC0745F293D2");

                    b.HasIndex(new[] { "NameAr" }, "UQ_Governments_Name_Ar")
                        .IsUnique();

                    b.HasIndex(new[] { "NameEn" }, "UQ_Governments_Name_En")
                        .IsUnique();

                    b.ToTable("Governments");
                });

            modelBuilder.Entity("Investly.DAL.Entities.Investor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("InvestingType")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Investor__3214EC0780F28580");

                    b.HasIndex(new[] { "UserId" }, "UQ__Investor__1788CC4D151790F5")
                        .IsUnique();

                    b.ToTable("Investors");
                });

            modelBuilder.Entity("Investly.DAL.Entities.InvestorContactRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BusinessId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DeclineReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvestorId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Investor__3214EC076FDDB974");

                    b.HasIndex("BusinessId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("InvestorId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("InvestorContactRequests");
                });

            modelBuilder.Entity("Investly.DAL.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("IsRead")
                        .HasColumnType("int");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserIdTo")
                        .HasColumnType("int");

                    b.Property<int>("UserTypeFrom")
                        .HasColumnType("int");

                    b.Property<int>("UserTypeTo")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Notifica__3214EC074D68EC79");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserIdTo");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Investly.DAL.Entities.Standard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("FormQuestion")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Form_Question");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Standard__3214EC07FD4E8146");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("Standards");
                });

            modelBuilder.Entity("Investly.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BackIdPicPath")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FrontIdPicPath")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("GovernmentId")
                        .HasColumnType("int");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProfilePicPath")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Users__3214EC07DBCD22E3");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GovernmentId");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D105346C2B56BA")
                        .IsUnique();

                    b.HasIndex(new[] { "NationalId" }, "UQ__Users__E9AA32FA413F176B")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Investly.DAL.Entities.Business", b =>
                {
                    b.HasOne("Investly.DAL.Entities.Category", "Category")
                        .WithMany("Businesses")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__Business__Catego__7F2BE32F");

                    b.HasOne("Investly.DAL.Entities.User", "CreatedByNavigation")
                        .WithMany("BusinessCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Business__Create__01142BA1");

                    b.HasOne("Investly.DAL.Entities.Founder", "Founder")
                        .WithMany("Businesses")
                        .HasForeignKey("FounderId")
                        .IsRequired()
                        .HasConstraintName("FK__Business__Founde__00200768");

                    b.HasOne("Investly.DAL.Entities.User", "UpdatedByNavigation")
                        .WithMany("BusinessUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Business__Update__02084FDA");

                    b.Navigation("Category");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Founder");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Investly.DAL.Entities.BusinessStandardAnswer", b =>
                {
                    b.HasOne("Investly.DAL.Entities.Business", "Business")
                        .WithMany("BusinessStandardAnswers")
                        .HasForeignKey("BusinessId")
                        .IsRequired()
                        .HasConstraintName("FK__BusinessS__Busin__10566F31");

                    b.HasOne("Investly.DAL.Entities.User", "CreatedByNavigation")
                        .WithMany("BusinessStandardAnswerCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__BusinessS__Creat__114A936A");

                    b.HasOne("Investly.DAL.Entities.Standard", "Standard")
                        .WithMany("BusinessStandardAnswers")
                        .HasForeignKey("StandardId")
                        .IsRequired()
                        .HasConstraintName("FK__BusinessS__Stand__0F624AF8");

                    b.HasOne("Investly.DAL.Entities.User", "UpdatedByNavigation")
                        .WithMany("BusinessStandardAnswerUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__BusinessS__Updat__123EB7A3");

                    b.Navigation("Business");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Standard");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Investly.DAL.Entities.Category", b =>
                {
                    b.HasOne("Investly.DAL.Entities.User", "CreatedByNavigation")
                        .WithMany("CategoryCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Category__Create__6FE99F9F");

                    b.HasOne("Investly.DAL.Entities.User", "UpdatedByNavigation")
                        .WithMany("CategoryUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Category__Update__70DDC3D8");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Investly.DAL.Entities.CategoryStandard", b =>
                {
                    b.HasOne("Investly.DAL.Entities.Category", "Category")
                        .WithMany("CategoryStandards")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK__CategoryS__Categ__797309D9");

                    b.HasOne("Investly.DAL.Entities.User", "CreatedByNavigation")
                        .WithMany("CategoryStandardCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__CategoryS__Creat__7A672E12");

                    b.HasOne("Investly.DAL.Entities.Standard", "Standard")
                        .WithMany("CategoryStandards")
                        .HasForeignKey("StandardId")
                        .IsRequired()
                        .HasConstraintName("FK__CategoryS__Stand__787EE5A0");

                    b.HasOne("Investly.DAL.Entities.User", "UpdatedByNavigation")
                        .WithMany("CategoryStandardUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__CategoryS__Updat__7B5B524B");

                    b.Navigation("Category");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Standard");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Investly.DAL.Entities.CategoryStandardsKeyWord", b =>
                {
                    b.HasOne("Investly.DAL.Entities.CategoryStandard", "CategoryStandard")
                        .WithMany("CategoryStandardsKeyWords")
                        .HasForeignKey("CategoryStandardId")
                        .IsRequired()
                        .HasConstraintName("FK__CategoryS__Categ__04E4BC85");

                    b.HasOne("Investly.DAL.Entities.User", "CreatedByNavigation")
                        .WithMany("CategoryStandardsKeyWordCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__CategoryS__Creat__05D8E0BE");

                    b.HasOne("Investly.DAL.Entities.User", "UpdatedByNavigation")
                        .WithMany("CategoryStandardsKeyWordUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__CategoryS__Updat__06CD04F7");

                    b.Navigation("CategoryStandard");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Investly.DAL.Entities.City", b =>
                {
                    b.HasOne("Investly.DAL.Entities.Government", "Gov")
                        .WithMany("Cities")
                        .HasForeignKey("GovId")
                        .IsRequired()
                        .HasConstraintName("FK__Cities__GovId__4CA06362");

                    b.Navigation("Gov");
                });

            modelBuilder.Entity("Investly.DAL.Entities.Feedback", b =>
                {
                    b.HasOne("Investly.DAL.Entities.User", "CreatedByNavigation")
                        .WithMany("FeedbackCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Feedback__Create__6C190EBB");

                    b.HasOne("Investly.DAL.Entities.User", "UpdatedByNavigation")
                        .WithMany("FeedbackUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Feedback__Update__6D0D32F4");

                    b.HasOne("Investly.DAL.Entities.User", "UserIdToNavigation")
                        .WithMany("FeedbackUserIdToNavigations")
                        .HasForeignKey("UserIdTo")
                        .IsRequired()
                        .HasConstraintName("FK__Feedback__UserId__6B24EA82");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("UserIdToNavigation");
                });

            modelBuilder.Entity("Investly.DAL.Entities.Founder", b =>
                {
                    b.HasOne("Investly.DAL.Entities.User", "User")
                        .WithOne("Founder")
                        .HasForeignKey("Investly.DAL.Entities.Founder", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Founders__UserId__5FB337D6");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Investly.DAL.Entities.Investor", b =>
                {
                    b.HasOne("Investly.DAL.Entities.User", "User")
                        .WithOne("Investor")
                        .HasForeignKey("Investly.DAL.Entities.Investor", "UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Investors__UserI__6383C8BA");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Investly.DAL.Entities.InvestorContactRequest", b =>
                {
                    b.HasOne("Investly.DAL.Entities.Business", "Business")
                        .WithMany("InvestorContactRequests")
                        .HasForeignKey("BusinessId")
                        .IsRequired()
                        .HasConstraintName("FK__InvestorC__Busin__09A971A2");

                    b.HasOne("Investly.DAL.Entities.User", "CreatedByNavigation")
                        .WithMany("InvestorContactRequestCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__InvestorC__Creat__0B91BA14");

                    b.HasOne("Investly.DAL.Entities.Investor", "Investor")
                        .WithMany("InvestorContactRequests")
                        .HasForeignKey("InvestorId")
                        .IsRequired()
                        .HasConstraintName("FK__InvestorC__Inves__0A9D95DB");

                    b.HasOne("Investly.DAL.Entities.User", "UpdatedByNavigation")
                        .WithMany("InvestorContactRequestUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__InvestorC__Updat__0C85DE4D");

                    b.Navigation("Business");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Investor");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Investly.DAL.Entities.Notification", b =>
                {
                    b.HasOne("Investly.DAL.Entities.User", "CreatedByNavigation")
                        .WithMany("NotificationCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Notificat__Creat__6754599E");

                    b.HasOne("Investly.DAL.Entities.User", "UpdatedByNavigation")
                        .WithMany("NotificationUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Notificat__Updat__68487DD7");

                    b.HasOne("Investly.DAL.Entities.User", "UserIdToNavigation")
                        .WithMany("NotificationUserIdToNavigations")
                        .HasForeignKey("UserIdTo")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__UserI__66603565");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");

                    b.Navigation("UserIdToNavigation");
                });

            modelBuilder.Entity("Investly.DAL.Entities.Standard", b =>
                {
                    b.HasOne("Investly.DAL.Entities.User", "CreatedByNavigation")
                        .WithMany("StandardCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Standards__Creat__73BA3083");

                    b.HasOne("Investly.DAL.Entities.User", "UpdatedByNavigation")
                        .WithMany("StandardUpdatedByNavigations")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Standards__Updat__74AE54BC");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Investly.DAL.Entities.User", b =>
                {
                    b.HasOne("Investly.DAL.Entities.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK__Users__CityId__59FA5E80");

                    b.HasOne("Investly.DAL.Entities.User", "CreatedByNavigation")
                        .WithMany("InverseCreatedByNavigation")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK__Users__CreatedBy__5AEE82B9");

                    b.HasOne("Investly.DAL.Entities.Government", "Government")
                        .WithMany("Users")
                        .HasForeignKey("GovernmentId")
                        .HasConstraintName("FK__Users__Governmen__59063A47");

                    b.HasOne("Investly.DAL.Entities.User", "UpdatedByNavigation")
                        .WithMany("InverseUpdatedByNavigation")
                        .HasForeignKey("UpdatedBy")
                        .HasConstraintName("FK__Users__UpdatedBy__5BE2A6F2");

                    b.Navigation("City");

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Government");

                    b.Navigation("UpdatedByNavigation");
                });

            modelBuilder.Entity("Investly.DAL.Entities.Business", b =>
                {
                    b.Navigation("BusinessStandardAnswers");

                    b.Navigation("InvestorContactRequests");
                });

            modelBuilder.Entity("Investly.DAL.Entities.Category", b =>
                {
                    b.Navigation("Businesses");

                    b.Navigation("CategoryStandards");
                });

            modelBuilder.Entity("Investly.DAL.Entities.CategoryStandard", b =>
                {
                    b.Navigation("CategoryStandardsKeyWords");
                });

            modelBuilder.Entity("Investly.DAL.Entities.City", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Investly.DAL.Entities.Founder", b =>
                {
                    b.Navigation("Businesses");
                });

            modelBuilder.Entity("Investly.DAL.Entities.Government", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Investly.DAL.Entities.Investor", b =>
                {
                    b.Navigation("InvestorContactRequests");
                });

            modelBuilder.Entity("Investly.DAL.Entities.Standard", b =>
                {
                    b.Navigation("BusinessStandardAnswers");

                    b.Navigation("CategoryStandards");
                });

            modelBuilder.Entity("Investly.DAL.Entities.User", b =>
                {
                    b.Navigation("BusinessCreatedByNavigations");

                    b.Navigation("BusinessStandardAnswerCreatedByNavigations");

                    b.Navigation("BusinessStandardAnswerUpdatedByNavigations");

                    b.Navigation("BusinessUpdatedByNavigations");

                    b.Navigation("CategoryCreatedByNavigations");

                    b.Navigation("CategoryStandardCreatedByNavigations");

                    b.Navigation("CategoryStandardUpdatedByNavigations");

                    b.Navigation("CategoryStandardsKeyWordCreatedByNavigations");

                    b.Navigation("CategoryStandardsKeyWordUpdatedByNavigations");

                    b.Navigation("CategoryUpdatedByNavigations");

                    b.Navigation("FeedbackCreatedByNavigations");

                    b.Navigation("FeedbackUpdatedByNavigations");

                    b.Navigation("FeedbackUserIdToNavigations");

                    b.Navigation("Founder");

                    b.Navigation("InverseCreatedByNavigation");

                    b.Navigation("InverseUpdatedByNavigation");

                    b.Navigation("Investor");

                    b.Navigation("InvestorContactRequestCreatedByNavigations");

                    b.Navigation("InvestorContactRequestUpdatedByNavigations");

                    b.Navigation("NotificationCreatedByNavigations");

                    b.Navigation("NotificationUpdatedByNavigations");

                    b.Navigation("NotificationUserIdToNavigations");

                    b.Navigation("StandardCreatedByNavigations");

                    b.Navigation("StandardUpdatedByNavigations");
                });
#pragma warning restore 612, 618
        }
    }
}
